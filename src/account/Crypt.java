package account;

import java.nio.file.Files;
import java.nio.file.Paths;
import java.security.Key;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import utils.SecurityUtils;

/**
 *
 * @author Eduardo Gomes a23032 e Pedro Martinho a23299
 */

public class Crypt extends javax.swing.JFrame {

    Key publickey;
    Key privatekey;
    Key simetrickey;

    /**
     * Creates new form GUI
     */
    
    public Crypt(Key publickey, Key privatekey, Key simetrickey) {
        this.publickey = publickey;
        this.privatekey = privatekey;
        this.simetrickey = simetrickey;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btEncrypt = new javax.swing.JButton();
        btDecrypt = new javax.swing.JButton();
        btSign = new javax.swing.JButton();
        btVerify = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btEncrypt.setText("Encrypt");
        btEncrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btEncryptActionPerformed(evt);
            }
        });

        btDecrypt.setText("Decrypt");
        btDecrypt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btDecryptActionPerformed(evt);
            }
        });

        btSign.setText("Sign");
        btSign.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btSignActionPerformed(evt);
            }
        });

        btVerify.setText("Verify");
        btVerify.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btVerifyActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btEncrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btDecrypt, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btSign, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btVerify, javax.swing.GroupLayout.PREFERRED_SIZE, 105, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btDecrypt, javax.swing.GroupLayout.DEFAULT_SIZE, 41, Short.MAX_VALUE)
                    .addComponent(btEncrypt, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btVerify, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btSign, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btEncryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btEncryptActionPerformed
        try {
            
            //Ler ficheiro
            byte[] img = Files.readAllBytes(Paths.get("index.jpg"));
            
            //Encriptar ficheiro com chave simétrica
            byte[] crypt = SecurityUtils.encrypt(img, simetrickey);
            
            //Guardar ficheiro (.crypt)
            Files.write(Paths.get("index.crypt"), crypt);
            
        } catch (Exception ex) {
            Logger.getLogger(Crypt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btEncryptActionPerformed

    private void btDecryptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btDecryptActionPerformed
        try {
            
            //Ler ficheiro encriptado
            byte[] crypted = Files.readAllBytes(Paths.get("index.crypt"));
            
            //Decriptar ficheiro com chave simétrica
            byte[] decrypted = SecurityUtils.decrypt(crypted, simetrickey);
            
            //Guardar ficheiro (.jpg)
            Files.write(Paths.get("index.jpg"), decrypted);
            
        } catch (Exception ex) {
            Logger.getLogger(Crypt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btDecryptActionPerformed

    private void btSignActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btSignActionPerformed
        try {
            
            //Ler ficheiro
            byte[] file = Files.readAllBytes(Paths.get("index.jpg"));
            
            //Assinar ficheiro com a chave privada
            byte[] data = SecurityUtils.sign(file, (PrivateKey) privatekey);
            
            //Guardar ficheiro (.sign)
            Files.write(Paths.get("index.sign"), data);
            
        } catch (Exception ex) {
            Logger.getLogger(Crypt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btSignActionPerformed

    private void btVerifyActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btVerifyActionPerformed
        try {
            
            //Ler ficheiro
            byte[] file = Files.readAllBytes(Paths.get("index.jpg"));
            
            //Ler ficheiro assinado
            byte[] sign = Files.readAllBytes(Paths.get("index.sign"));
            
            //Verificar assinatura
            if(SecurityUtils.verifySign(file, sign, (PublicKey) publickey)) {
                JOptionPane.showMessageDialog(new JFrame(), "Valid Signature.", "Success",JOptionPane.INFORMATION_MESSAGE);
            } else {
                JOptionPane.showMessageDialog(new JFrame(), "Invalid Signature.", "Warning",JOptionPane.WARNING_MESSAGE);
            }
            
        } catch (Exception ex) {
            Logger.getLogger(Crypt.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btVerifyActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Crypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Crypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Crypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Crypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btDecrypt;
    private javax.swing.JButton btEncrypt;
    private javax.swing.JButton btSign;
    private javax.swing.JButton btVerify;
    // End of variables declaration//GEN-END:variables
}
